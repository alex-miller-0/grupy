#!/usr/bin/env python
import os
import sys

## append path to grupy modules
cwd = os.path.dirname(os.path.abspath(__file__))
sys.path.append( os.path.join( cwd, "..") )



from grupy import *
from grupy.qe import *
from optparse import OptionParser




# should eventually write some flags for bad data input
## From input file
##################

dir, sg, hs_path, hs_points = GetInput()




## Parse options to graph data and to make/run q2r.in and matdyn.in scripts 
###########################################################################

parser = OptionParser()
parser.set_defaults( graph_now = False, make_scripts = False, run_scripts = False)

parser.add_option("--graph", dest="graph_now", action="store_true")
parser.add_option("--make", dest="make_scripts", action="store_true")
parser.add_option("--run", dest="run_scripts", action="store_true")

(options, args) = parser.parse_args() 





#### grupy_in object
####################
Gin = grupy_in(dir, hs_path, hs_points, sg, None, None, None, None, None, None, None)



Gin.prefix = GetPrefix( Gin.dir ) #WORKS
Gin.path = MakePath( hs_path )  #WORKS
(Gin.nat, Gin.V, Gin.m) = GetNat_M_V( Gin.dir, Gin.prefix) #WORKS BETTER

if options.make_scripts:
	MakeMatdyn( Gin.dir, Gin.prefix, Gin.path, Gin.m) #WORKS
	MakeQ2r(Gin.prefix, Gin.dir) #WORKS

if options.run_scripts:
	RunQ2r(dir)
	RunMatdyn(dir)




Gin.q, gru_data = GruCalc ( Gin.V, Gin.nat, Gin.m, Gin.dir) #WORKS


#### grupy_out
##############
Gout = grupy_out( Gin.prefix, HighSymDatabase( Gin.hs_points, Gin.sg, Gin.q ) , gru_data   ) #WORKS


# Write the file and graph if told to
#####################################

WriteGrupyFile(Gout) #WORKS


if options.graph_now:
	GruPlot( Gout.prefix, Gout.q_labels, Gout.gru_data)

